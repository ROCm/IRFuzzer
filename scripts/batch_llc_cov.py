from pathlib import Path
import re
import shutil
import subprocess
from typing import NamedTuple
from tap import Tap
from tqdm import tqdm

from cov import run_with_coverage
from lib import FUZZING_HOME, LLVM


LLVM_COV_BUILD_DIR = Path(LLVM, "build-release-cov")
LLC_WITH_COV = LLVM_COV_BUILD_DIR.joinpath("bin/llc")


class Args(Tap):
    """
    Generate combined coverage raw data (*.gcda) by invoking coverage-instrumented `llc`
    multiple times with different input IR files in a directory and capture them into a
    single `cov.info` file using `lcov` with `llvm-cov gcov`.

    Usage: `python scripts/batch_llc_cov.py -i <in_dir> -o <out_dir> [-c] -- <llc_flags>`
    """

    llc_flags: list[str]

    in_dir: Path
    """
    Directory containing input IR files (*.ll/*.bc) to `llc`.
    """

    out_dir: Path
    """
    Output directory for combined raw coverage data files (*.gcda) generated by
    the instrumented `llc`, a single `cov.info` generated by `lcov` with
    `llvm-cov gcov`, and a folder `html` containing coverage report.
    """

    copy: bool = False
    """
    Copying instead hardlinking *.o, *.inc, *.gcno files.
    Useful when the output dir is not on the same device as the build dir.
    """

    def configure(self) -> None:
        self.add_argument("llc_flags")
        self.add_argument("-i", "--in-dir")
        self.add_argument("-o", "--out-dir")
        self.add_argument("-c", "--copy")


class Coverage(NamedTuple):
    lines: tuple[int, int]
    branches: tuple[int, int]
    functions: tuple[int, int]


def read_coverage_summary(index_html: Path) -> Coverage:
    content = index_html.read_text(encoding="utf-8")

    def extract_coverage(item: str) -> tuple[int, int]:
        match = re.search(
            rf'<td class="headerItem">{item}:<\/td>\s+<td class="headerCovTableEntry">([0-9]+)<\/td>\s+<td class="headerCovTableEntry">([0-9]+)<\/td>',
            content,
        )

        if match is None:
            raise ValueError(f"Cannot find coverage summary for {item}")

        return (int(match.group(1)), int(match.group(2)))

    return Coverage(
        lines=extract_coverage("Lines"),
        branches=extract_coverage("Branches"),
        functions=extract_coverage("Functions"),
    )


def batch_llc_cov(
    llc_flags: list[str], in_dir: Path, out_dir: Path, copy: bool = False
) -> Coverage:
    print("Step 1/4: Profiling `llc` for each input...")

    base_dir = Path(FUZZING_HOME or ".")

    # Do not make this concurrent since they will write to the same *.gcda files.
    for ir_file in tqdm(list(in_dir.iterdir())):
        if ir_file.is_dir():
            continue

        run_with_coverage(
            [str(LLC_WITH_COV), "-o", "-", *llc_flags, str(ir_file)],
            out_dir,
            stdout=subprocess.DEVNULL,
            dir=base_dir,
        )

    print(
        f"Step 2/4: Creating {'copies' if copy else 'hardlinks'} of *.o, *.inc, *.gcno files..."
    )

    lib_dir = LLVM_COV_BUILD_DIR.joinpath("lib")

    if lib_dir.is_absolute():
        raise ValueError(f"lib_dir should be a relative path: {lib_dir}")
    
    include_dir = LLVM_COV_BUILD_DIR.joinpath("include")

    if include_dir.is_absolute():
        raise ValueError(f"include_dir should be a relative path: {lib_dir}")

    include_dir = LLVM_COV_BUILD_DIR.joinpath("include")

    if include_dir.is_absolute():
        raise ValueError(f"include_dir should be a relative path: {lib_dir}")

    files_to_link = [
        *lib_dir.rglob("*.gcno"),
        *lib_dir.rglob("*.o"),
        *lib_dir.rglob("*.inc"),
        *include_dir.rglob("*.inc"),
        *LLVM_COV_BUILD_DIR.glob("tools/llc/CMakeFiles/llc.dir/llc.cpp.*"),
    ]

    for target in tqdm(files_to_link):
        link_path = out_dir.joinpath(target)
        link_path.parent.mkdir(parents=True, exist_ok=True)

        if copy:
            shutil.copy2(target, link_path)
        else:
            link_path.hardlink_to(target)  # `llvm-cov gcov` does not support symlinks

    print("Step 3/4: Capturing raw coverage data into `cov.info` using `lcov`...")

    subprocess.run(
        [
            "lcov",
            "--capture",
            "--directory",
            str(out_dir),
            "--gcov-tool",
            base_dir.joinpath("llvm-gcov.sh"),
            "--output",
            str(out_dir.joinpath("cov.info")),
            "--rc",
            "lcov_branch_coverage=1",
        ],
        check=True,
    )

    print("Step 4/4: Generating HTML report...")

    subprocess.run(
        [
            "genhtml",
            "cov.info",
            "--output-directory",
            "html",
            "--rc",
            "genhtml_branch_coverage=1",
        ],
        check=True,
        cwd=out_dir,
    )

    return read_coverage_summary(out_dir.joinpath("html/index.html"))


def main():
    args = Args(underscores_to_dashes=True).parse_args()

    coverage = batch_llc_cov(
        args.llc_flags,
        args.in_dir,
        args.out_dir,
        args.copy,
    )

    print(coverage)


if __name__ == "__main__":
    main()
