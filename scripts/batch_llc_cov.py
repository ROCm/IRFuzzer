from pathlib import Path
import shutil
import subprocess
from tap import Tap
from tqdm import tqdm

from cov import run_with_coverage
from lib import FUZZING_HOME, LLVM


LLVM_COV_BUILD_DIR = Path(LLVM, "build-release-cov")
LLC_WITH_COV = LLVM_COV_BUILD_DIR.joinpath("bin/llc")


class Args(Tap):
    """
    Generate combined coverage raw data (*.gcda) by invoking coverage-instrumented `llc`
    multiple times with different input IR files in a directory and capture them into a
    single `cov.info` file using `lcov` with `llvm-cov gcov`.

    Usage: `python scripts/batch_llc_cov.py -i <in_dir> -o <out_dir> [-c] -- <llc_flags>`
    """

    llc_flags: list[str]

    in_dir: Path
    """
    Directory containing input IR files (*.ll/*.bc) to `llc`.
    """

    out_dir: Path
    """
    Output directory for combined raw coverage data files (*.gcda) generated by
    the instrumented `llc` and a single `cov.info` generated by `lcov` with
    `llvm-cov gcov`.
    """

    copy: bool = False
    """
    Copying instead hardlinking *.o, *.inc, *.gcno files.
    Useful when the output dir is not on the same device as the build dir.
    """

    def configure(self) -> None:
        self.add_argument("llc_flags")
        self.add_argument("-i", "--in-dir")
        self.add_argument("-o", "--out-dir")
        self.add_argument("-c", "--copy")


def main():
    args = Args(underscores_to_dashes=True).parse_args()

    print("Step 1/4: Profiling `llc` for each input...")

    base_dir = Path(FUZZING_HOME or ".")

    # Do not make this concurrent since they will write to the same *.gcda files.
    for ir_file in tqdm(list(args.in_dir.iterdir())):
        run_with_coverage(
            [str(LLC_WITH_COV), "-o", "-", *args.llc_flags, str(ir_file)],
            args.out_dir,
            stdout=subprocess.DEVNULL,
            dir=base_dir,
        )

    print(
        f"Step 2/4: Creating {'copies' if args.copy else 'hardlinks'} of *.o, *.inc, *.gcno files..."
    )

    lib_dir = LLVM_COV_BUILD_DIR.joinpath("lib")

    if lib_dir.is_absolute():
        raise ValueError(f"lib_dir should be a relative path: {lib_dir}")

    files_to_link = [
        *lib_dir.rglob("*.gcno"),
        *lib_dir.rglob("*.o"),
        *lib_dir.rglob("*.inc"),
        *LLVM_COV_BUILD_DIR.glob("tools/llc/CMakeFiles/llc.dir/llc.cpp.*"),
    ]

    for target in tqdm(files_to_link):
        link_path = args.out_dir.joinpath(target)
        link_path.parent.mkdir(parents=True, exist_ok=True)

        if (args.copy):
            shutil.copy2(target, link_path)
        else:
            link_path.hardlink_to(target)  # `llvm-cov gcov` does not support symlinks

    print("Step 3/4: Capturing raw coverage data into `cov.info` using `lcov`...")

    subprocess.run(
        [
            "lcov",
            "--capture",
            "--directory",
            str(args.out_dir),
            "--gcov-tool",
            base_dir.joinpath("llvm-gcov.sh"),
            "--output",
            str(args.out_dir.joinpath("cov.info")),
        ],
        check=True,
    )

    print("Step 4/4: Generating HTML report...")

    subprocess.run(
        [
            "genhtml",
            "cov.info",
            "--output-directory",
            "html",
        ],
        check=True,
        cwd=args.out_dir,
    )


if __name__ == "__main__":
    main()
